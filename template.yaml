AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  stori-flow

  Sample SAM Template for stori-flow

Globals:
  Function:
    Tracing: Active
    Timeout: 300
  Api:
    TracingEnabled: True

Resources:
  TransactionsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  StoriFlowStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/stori_flow.asl.json
      DefinitionSubstitutions:
        ProcessFileFunctionArn: !GetAtt ProcessFileFunction.Arn
        GetDataFunctionArn: !GetAtt GetDataFunction.Arn
        SendEmailFunctionArn: !GetAtt SendEmailFunction.Arn
        # DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        # DDBTable: !Ref TransactionTable
      Events:
        StateChange:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref TransactionsBucket
      Policies:
        - RekognitionDetectOnlyPolicy: {}
        - S3ReadPolicy:
            BucketName: !Ref TransactionsBucket
        - LambdaInvokePolicy:
            FunctionName: !Ref ProcessFileFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetDataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendEmailFunction
        
        
        # - DynamoDBWritePolicy:
            # TableName: !Ref TransactionTable

  ProcessFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/process_file/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  GetDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_data/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  SendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send_email/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  # TransactionTable:
    # Type: AWS::Serverless::SimpleTable
    # Properties:
      # PrimaryKey:
        # Name: Id
        # Type: String
      # ProvisionedThroughput:
        # ReadCapacityUnits: 1
        # WriteCapacityUnits: 1

Outputs:
  StockTradingStateMachineArn:
    Description: "Stock Trading State machine ARN"
    Value: !Ref StockTradingStateMachine
  StockTradingStateMachineRoleArn:
    Description: "IAM Role created for Stock Trading State machine based on the specified SAM Policy Templates"
    Value: !GetAtt StockTradingStateMachineRole.Arn
